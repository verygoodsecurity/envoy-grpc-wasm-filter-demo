// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#include "transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transform_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_RequestHeaderItem_transform_2eproto;
class RequestHeaderItemDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeaderItem>
        _instance;
} _RequestHeaderItem_default_instance_;
class HeaderRequestDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderRequest>
        _instance;
} _HeaderRequest_default_instance_;
class HeaderResponseDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderResponse>
        _instance;
} _HeaderResponse_default_instance_;
class BodyRequestDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyRequest>
        _instance;
} _BodyRequest_default_instance_;
class BodyResponseDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyResponse>
        _instance;
} _BodyResponse_default_instance_;
static void InitDefaultsscc_info_BodyRequest_transform_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::_BodyRequest_default_instance_;
        new (ptr)::BodyRequest();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::BodyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_BodyRequest_transform_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_BodyRequest_transform_2eproto},
        {}};

static void InitDefaultsscc_info_BodyResponse_transform_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::_BodyResponse_default_instance_;
        new (ptr)::BodyResponse();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::BodyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_BodyResponse_transform_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_BodyResponse_transform_2eproto},
        {}};

static void InitDefaultsscc_info_HeaderRequest_transform_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::_HeaderRequest_default_instance_;
        new (ptr)::HeaderRequest();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::HeaderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_HeaderRequest_transform_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_HeaderRequest_transform_2eproto},
        {
            &scc_info_RequestHeaderItem_transform_2eproto.base,
        }};

static void InitDefaultsscc_info_HeaderResponse_transform_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::_HeaderResponse_default_instance_;
        new (ptr)::HeaderResponse();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::HeaderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_HeaderResponse_transform_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_HeaderResponse_transform_2eproto},
        {
            &scc_info_RequestHeaderItem_transform_2eproto.base,
        }};

static void InitDefaultsscc_info_RequestHeaderItem_transform_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::_RequestHeaderItem_default_instance_;
        new (ptr)::RequestHeaderItem();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::RequestHeaderItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_RequestHeaderItem_transform_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_RequestHeaderItem_transform_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_transform_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_transform_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_transform_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_transform_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RequestHeaderItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::RequestHeaderItem, key_),
        PROTOBUF_FIELD_OFFSET(::RequestHeaderItem, value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HeaderRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::HeaderRequest, path_),
        PROTOBUF_FIELD_OFFSET(::HeaderRequest, headers_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HeaderResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::HeaderResponse, path_),
        PROTOBUF_FIELD_OFFSET(::HeaderResponse, headers_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::BodyRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::BodyRequest, content_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::BodyResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::BodyResponse, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::RequestHeaderItem)}, {7, -1, sizeof(::HeaderRequest)},
        {14, -1, sizeof(::HeaderResponse)},   {21, -1, sizeof(::BodyRequest)},
        {27, -1, sizeof(::BodyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_RequestHeaderItem_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_HeaderRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_HeaderResponse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_BodyRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_BodyResponse_default_instance_),
};

const char
    descriptor_table_protodef_transform_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\017transform.proto\"/\n\021RequestHeaderItem\022\013"
        "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
        "\001(\t\"B\n\rHeaderRequ"
        "est\022\014\n\004path\030\001 \001(\t\022#\n\007headers\030\002 "
        "\003(\0132\022.Req"
        "uestHeaderItem\"C\n\016HeaderResponse\022\014\n\004path"
        "\030\001 \001(\t\022#\n\007headers\030\002 "
        "\003(\0132\022.RequestHeaderI"
        "tem\"\036\n\013BodyRequest\022\017\n\007content\030\001 "
        "\001(\t\"\037\n\014B"
        "odyResponse\022\017\n\007content\030\001 \001(\t2q\n\tTransfor"
        "m\0224\n\017TransformHeader\022\016.HeaderRequest\032\017.H"
        "eaderResponse\"\000\022.\n\rTransformBody\022\014.BodyR"
        "equest\032\r.BodyResponse\"\000b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_transform_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_transform_2eproto_sccs[5] = {
        &scc_info_BodyRequest_transform_2eproto.base,
        &scc_info_BodyResponse_transform_2eproto.base,
        &scc_info_HeaderRequest_transform_2eproto.base,
        &scc_info_HeaderResponse_transform_2eproto.base,
        &scc_info_RequestHeaderItem_transform_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_transform_2eproto_once;
static bool descriptor_table_transform_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_transform_2eproto = {
        &descriptor_table_transform_2eproto_initialized,
        descriptor_table_protodef_transform_2eproto,
        "transform.proto",
        391,
        &descriptor_table_transform_2eproto_once,
        descriptor_table_transform_2eproto_sccs,
        descriptor_table_transform_2eproto_deps,
        5,
        0,
        schemas,
        file_default_instances,
        TableStruct_transform_2eproto::offsets,
        file_level_metadata_transform_2eproto,
        5,
        file_level_enum_descriptors_transform_2eproto,
        file_level_service_descriptors_transform_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transform_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_transform_2eproto),
     true);

// ===================================================================

void RequestHeaderItem::InitAsDefaultInstance() {}
class RequestHeaderItem::_Internal {
public:
};

RequestHeaderItem::RequestHeaderItem()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    SharedCtor();
    // @@protoc_insertion_point(constructor:RequestHeaderItem)
}
RequestHeaderItem::RequestHeaderItem(const RequestHeaderItem& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    key_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.key().empty()) {
        key_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.key_);
    }
    value_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.value().empty()) {
        value_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.value_);
    }
    // @@protoc_insertion_point(copy_constructor:RequestHeaderItem)
}

void RequestHeaderItem::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &scc_info_RequestHeaderItem_transform_2eproto.base);
    key_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    value_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestHeaderItem::~RequestHeaderItem() {
    // @@protoc_insertion_point(destructor:RequestHeaderItem)
    SharedDtor();
}

void RequestHeaderItem::SharedDtor() {
    key_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    value_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestHeaderItem::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}
const RequestHeaderItem& RequestHeaderItem::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &::scc_info_RequestHeaderItem_transform_2eproto.base);
    return *internal_default_instance();
}

void RequestHeaderItem::Clear() {
    // @@protoc_insertion_point(message_clear_start:RequestHeaderItem)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    key_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    value_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestHeaderItem::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string key = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx,
                                                     "RequestHeaderItem.key");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string value = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        18)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx,
                                                     "RequestHeaderItem.value");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }      // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestHeaderItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    // @@protoc_insertion_point(parse_start:RequestHeaderItem)
    for (;;) {
        ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
            input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                    GetTagFieldNumber(tag)) {
            // string key = 1;
            case 1: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (10 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_key()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->key().data(),
                                static_cast<int>(this->key().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "RequestHeaderItem.key"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // string value = 2;
            case 2: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (18 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_value()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->value().data(),
                                static_cast<int>(this->value().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "RequestHeaderItem.value"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:RequestHeaderItem)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:RequestHeaderItem)
    return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestHeaderItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:RequestHeaderItem)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string key = 1;
    if (this->key().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "RequestHeaderItem.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(1, this->key(), output);
    }

    // string value = 2;
    if (this->value().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "RequestHeaderItem.value");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(2, this->value(), output);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:RequestHeaderItem)
}

::PROTOBUF_NAMESPACE_ID::uint8*
RequestHeaderItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
    // @@protoc_insertion_point(serialize_to_array_start:RequestHeaderItem)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string key = 1;
    if (this->key().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "RequestHeaderItem.key");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(1, this->key(), target);
    }

    // string value = 2;
    if (this->value().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "RequestHeaderItem.value");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(2, this->value(), target);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                          target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:RequestHeaderItem)
    return target;
}

size_t RequestHeaderItem::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:RequestHeaderItem)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields()) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            ComputeUnknownFieldsSize(_internal_metadata_.unknown_fields());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string key = 1;
    if (this->key().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->key());
    }

    // string value = 2;
    if (this->value().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->value());
    }

    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void RequestHeaderItem::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:RequestHeaderItem)
    GOOGLE_DCHECK_NE(&from, this);
    const RequestHeaderItem* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeaderItem>(
            &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestHeaderItem)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestHeaderItem)
        MergeFrom(*source);
    }
}

void RequestHeaderItem::MergeFrom(const RequestHeaderItem& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:RequestHeaderItem)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.key().size() > 0) {
        key_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.key_);
    }
    if (from.value().size() > 0) {
        value_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.value_);
    }
}

void RequestHeaderItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:RequestHeaderItem)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RequestHeaderItem::CopyFrom(const RequestHeaderItem& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:RequestHeaderItem)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RequestHeaderItem::IsInitialized() const { return true; }

void RequestHeaderItem::InternalSwap(RequestHeaderItem* other) {
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    key_.Swap(&other->key_,
              &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
    value_.Swap(
        &other->value_,
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaderItem::GetMetadata() const {
    return GetMetadataStatic();
}

// ===================================================================

void HeaderRequest::InitAsDefaultInstance() {}
class HeaderRequest::_Internal {
public:
};

HeaderRequest::HeaderRequest()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    SharedCtor();
    // @@protoc_insertion_point(constructor:HeaderRequest)
}
HeaderRequest::HeaderRequest(const HeaderRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      headers_(from.headers_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    path_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.path().empty()) {
        path_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.path_);
    }
    // @@protoc_insertion_point(copy_constructor:HeaderRequest)
}

void HeaderRequest::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &scc_info_HeaderRequest_transform_2eproto.base);
    path_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HeaderRequest::~HeaderRequest() {
    // @@protoc_insertion_point(destructor:HeaderRequest)
    SharedDtor();
}

void HeaderRequest::SharedDtor() {
    path_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeaderRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const HeaderRequest& HeaderRequest::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &::scc_info_HeaderRequest_transform_2eproto.base);
    return *internal_default_instance();
}

void HeaderRequest::Clear() {
    // @@protoc_insertion_point(message_clear_start:HeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    headers_.Clear();
    path_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeaderRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string path = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx,
                                                     "HeaderRequest.path");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // repeated .RequestHeaderItem headers = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(add_headers(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                                 ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
                } else
                    goto handle_unusual;
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }      // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeaderRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    // @@protoc_insertion_point(parse_start:HeaderRequest)
    for (;;) {
        ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
            input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                    GetTagFieldNumber(tag)) {
            // string path = 1;
            case 1: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (10 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_path()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->path().data(),
                                static_cast<int>(this->path().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "HeaderRequest.path"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .RequestHeaderItem headers = 2;
            case 2: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (18 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadMessage(input, add_headers()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:HeaderRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:HeaderRequest)
    return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeaderRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:HeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string path = 1;
    if (this->path().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "HeaderRequest.path");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(1, this->path(), output);
    }

    // repeated .RequestHeaderItem headers = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->headers_size());
         i < n; i++) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteMessageMaybeToArray(2, this->headers(static_cast<int>(i)),
                                     output);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:HeaderRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8*
HeaderRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
    // @@protoc_insertion_point(serialize_to_array_start:HeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string path = 1;
    if (this->path().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "HeaderRequest.path");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(1, this->path(), target);
    }

    // repeated .RequestHeaderItem headers = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->headers_size());
         i < n; i++) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessageToArray(2, this->headers(static_cast<int>(i)),
                                        target);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                          target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:HeaderRequest)
    return target;
}

size_t HeaderRequest::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:HeaderRequest)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields()) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            ComputeUnknownFieldsSize(_internal_metadata_.unknown_fields());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .RequestHeaderItem headers = 2;
    {
        unsigned int count = static_cast<unsigned int>(this->headers_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    this->headers(static_cast<int>(i)));
        }
    }

    // string path = 1;
    if (this->path().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->path());
    }

    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void HeaderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:HeaderRequest)
    GOOGLE_DCHECK_NE(&from, this);
    const HeaderRequest* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderRequest>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeaderRequest)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:HeaderRequest)
        MergeFrom(*source);
    }
}

void HeaderRequest::MergeFrom(const HeaderRequest& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:HeaderRequest)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    headers_.MergeFrom(from.headers_);
    if (from.path().size() > 0) {
        path_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.path_);
    }
}

void HeaderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:HeaderRequest)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void HeaderRequest::CopyFrom(const HeaderRequest& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:HeaderRequest)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool HeaderRequest::IsInitialized() const { return true; }

void HeaderRequest::InternalSwap(HeaderRequest* other) {
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
    path_.Swap(
        &other->path_,
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderRequest::GetMetadata() const {
    return GetMetadataStatic();
}

// ===================================================================

void HeaderResponse::InitAsDefaultInstance() {}
class HeaderResponse::_Internal {
public:
};

HeaderResponse::HeaderResponse()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    SharedCtor();
    // @@protoc_insertion_point(constructor:HeaderResponse)
}
HeaderResponse::HeaderResponse(const HeaderResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      headers_(from.headers_) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    path_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.path().empty()) {
        path_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.path_);
    }
    // @@protoc_insertion_point(copy_constructor:HeaderResponse)
}

void HeaderResponse::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &scc_info_HeaderResponse_transform_2eproto.base);
    path_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HeaderResponse::~HeaderResponse() {
    // @@protoc_insertion_point(destructor:HeaderResponse)
    SharedDtor();
}

void HeaderResponse::SharedDtor() {
    path_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeaderResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }
const HeaderResponse& HeaderResponse::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &::scc_info_HeaderResponse_transform_2eproto.base);
    return *internal_default_instance();
}

void HeaderResponse::Clear() {
    // @@protoc_insertion_point(message_clear_start:HeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    headers_.Clear();
    path_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeaderResponse::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string path = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx,
                                                     "HeaderResponse.path");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // repeated .RequestHeaderItem headers = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(add_headers(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                                 ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
                } else
                    goto handle_unusual;
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }      // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeaderResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    // @@protoc_insertion_point(parse_start:HeaderResponse)
    for (;;) {
        ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
            input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                    GetTagFieldNumber(tag)) {
            // string path = 1;
            case 1: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (10 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_path()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->path().data(),
                                static_cast<int>(this->path().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "HeaderResponse.path"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .RequestHeaderItem headers = 2;
            case 2: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (18 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadMessage(input, add_headers()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:HeaderResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:HeaderResponse)
    return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeaderResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:HeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string path = 1;
    if (this->path().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "HeaderResponse.path");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(1, this->path(), output);
    }

    // repeated .RequestHeaderItem headers = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->headers_size());
         i < n; i++) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteMessageMaybeToArray(2, this->headers(static_cast<int>(i)),
                                     output);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:HeaderResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8*
HeaderResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
    // @@protoc_insertion_point(serialize_to_array_start:HeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string path = 1;
    if (this->path().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "HeaderResponse.path");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(1, this->path(), target);
    }

    // repeated .RequestHeaderItem headers = 2;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->headers_size());
         i < n; i++) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessageToArray(2, this->headers(static_cast<int>(i)),
                                        target);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                          target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:HeaderResponse)
    return target;
}

size_t HeaderResponse::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:HeaderResponse)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields()) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            ComputeUnknownFieldsSize(_internal_metadata_.unknown_fields());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .RequestHeaderItem headers = 2;
    {
        unsigned int count = static_cast<unsigned int>(this->headers_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++) {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    this->headers(static_cast<int>(i)));
        }
    }

    // string path = 1;
    if (this->path().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->path());
    }

    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void HeaderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:HeaderResponse)
    GOOGLE_DCHECK_NE(&from, this);
    const HeaderResponse* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderResponse>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeaderResponse)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:HeaderResponse)
        MergeFrom(*source);
    }
}

void HeaderResponse::MergeFrom(const HeaderResponse& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:HeaderResponse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    headers_.MergeFrom(from.headers_);
    if (from.path().size() > 0) {
        path_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.path_);
    }
}

void HeaderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:HeaderResponse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void HeaderResponse::CopyFrom(const HeaderResponse& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:HeaderResponse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool HeaderResponse::IsInitialized() const { return true; }

void HeaderResponse::InternalSwap(HeaderResponse* other) {
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
    path_.Swap(
        &other->path_,
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderResponse::GetMetadata() const {
    return GetMetadataStatic();
}

// ===================================================================

void BodyRequest::InitAsDefaultInstance() {}
class BodyRequest::_Internal {
public:
};

BodyRequest::BodyRequest()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    SharedCtor();
    // @@protoc_insertion_point(constructor:BodyRequest)
}
BodyRequest::BodyRequest(const BodyRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    content_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.content().empty()) {
        content_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.content_);
    }
    // @@protoc_insertion_point(copy_constructor:BodyRequest)
}

void BodyRequest::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &scc_info_BodyRequest_transform_2eproto.base);
    content_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BodyRequest::~BodyRequest() {
    // @@protoc_insertion_point(destructor:BodyRequest)
    SharedDtor();
}

void BodyRequest::SharedDtor() {
    content_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BodyRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const BodyRequest& BodyRequest::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &::scc_info_BodyRequest_transform_2eproto.base);
    return *internal_default_instance();
}

void BodyRequest::Clear() {
    // @@protoc_insertion_point(message_clear_start:BodyRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    content_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BodyRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string content = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(
                            mutable_content(), ptr, ctx, "BodyRequest.content");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }      // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BodyRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    // @@protoc_insertion_point(parse_start:BodyRequest)
    for (;;) {
        ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
            input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                    GetTagFieldNumber(tag)) {
            // string content = 1;
            case 1: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (10 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_content()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->content().data(),
                                static_cast<int>(this->content().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "BodyRequest.content"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:BodyRequest)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:BodyRequest)
    return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BodyRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:BodyRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "BodyRequest.content");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(1, this->content(), output);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:BodyRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8*
BodyRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
    // @@protoc_insertion_point(serialize_to_array_start:BodyRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "BodyRequest.content");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(1, this->content(), target);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                          target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:BodyRequest)
    return target;
}

size_t BodyRequest::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:BodyRequest)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields()) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            ComputeUnknownFieldsSize(_internal_metadata_.unknown_fields());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->content());
    }

    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void BodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:BodyRequest)
    GOOGLE_DCHECK_NE(&from, this);
    const BodyRequest* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyRequest>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:BodyRequest)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:BodyRequest)
        MergeFrom(*source);
    }
}

void BodyRequest::MergeFrom(const BodyRequest& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:BodyRequest)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.content().size() > 0) {
        content_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.content_);
    }
}

void BodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:BodyRequest)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void BodyRequest::CopyFrom(const BodyRequest& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:BodyRequest)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool BodyRequest::IsInitialized() const { return true; }

void BodyRequest::InternalSwap(BodyRequest* other) {
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    content_.Swap(
        &other->content_,
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyRequest::GetMetadata() const {
    return GetMetadataStatic();
}

// ===================================================================

void BodyResponse::InitAsDefaultInstance() {}
class BodyResponse::_Internal {
public:
};

BodyResponse::BodyResponse()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    SharedCtor();
    // @@protoc_insertion_point(constructor:BodyResponse)
}
BodyResponse::BodyResponse(const BodyResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    content_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from.content().empty()) {
        content_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.content_);
    }
    // @@protoc_insertion_point(copy_constructor:BodyResponse)
}

void BodyResponse::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &scc_info_BodyResponse_transform_2eproto.base);
    content_.UnsafeSetDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BodyResponse::~BodyResponse() {
    // @@protoc_insertion_point(destructor:BodyResponse)
    SharedDtor();
}

void BodyResponse::SharedDtor() {
    content_.DestroyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BodyResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }
const BodyResponse& BodyResponse::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
        &::scc_info_BodyResponse_transform_2eproto.base);
    return *internal_default_instance();
}

void BodyResponse::Clear() {
    // @@protoc_insertion_point(message_clear_start:BodyResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    content_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BodyResponse::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // string content = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(
                        static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                        10)) {
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::
                        InlineGreedyStringParserUTF8(mutable_content(), ptr,
                                                     ctx,
                                                     "BodyResponse.content");
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }      // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BodyResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
    if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    // @@protoc_insertion_point(parse_start:BodyResponse)
    for (;;) {
        ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
            input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                    GetTagFieldNumber(tag)) {
            // string content = 1;
            case 1: {
                if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) ==
                    (10 & 0xFF)) {
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            ReadString(input, this->mutable_content()));
                    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                            VerifyUtf8String(
                                this->content().data(),
                                static_cast<int>(this->content().length()),
                                ::PROTOBUF_NAMESPACE_ID::internal::
                                    WireFormatLite::PARSE,
                                "BodyResponse.content"));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:BodyResponse)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:BodyResponse)
    return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BodyResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:BodyResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "BodyResponse.content");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringMaybeAliased(1, this->content(), output);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:BodyResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8*
BodyResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
    // @@protoc_insertion_point(serialize_to_array_start:BodyResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "BodyResponse.content");
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            WriteStringToArray(1, this->content(), target);
    }

    if (_internal_metadata_.have_unknown_fields()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                          target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:BodyResponse)
    return target;
}

size_t BodyResponse::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:BodyResponse)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields()) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            ComputeUnknownFieldsSize(_internal_metadata_.unknown_fields());
    }
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string content = 1;
    if (this->content().size() > 0) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->content());
    }

    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void BodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_merge_from_start:BodyResponse)
    GOOGLE_DCHECK_NE(&from, this);
    const BodyResponse* source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyResponse>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:BodyResponse)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:BodyResponse)
        MergeFrom(*source);
    }
}

void BodyResponse::MergeFrom(const BodyResponse& from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:BodyResponse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.content().size() > 0) {
        content_.AssignWithDefault(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from.content_);
    }
}

void BodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
    // @@protoc_insertion_point(generalized_copy_from_start:BodyResponse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void BodyResponse::CopyFrom(const BodyResponse& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:BodyResponse)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool BodyResponse::IsInitialized() const { return true; }

void BodyResponse::InternalSwap(BodyResponse* other) {
    using std::swap;
    _internal_metadata_.Swap(&other->_internal_metadata_);
    content_.Swap(
        &other->content_,
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyResponse::GetMetadata() const {
    return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::RequestHeaderItem*
Arena::CreateMaybeMessage<::RequestHeaderItem>(Arena* arena) {
    return Arena::CreateInternal<::RequestHeaderItem>(arena);
}
template <>
PROTOBUF_NOINLINE ::HeaderRequest* Arena::CreateMaybeMessage<::HeaderRequest>(
    Arena* arena) {
    return Arena::CreateInternal<::HeaderRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::HeaderResponse* Arena::CreateMaybeMessage<::HeaderResponse>(
    Arena* arena) {
    return Arena::CreateInternal<::HeaderResponse>(arena);
}
template <>
PROTOBUF_NOINLINE ::BodyRequest* Arena::CreateMaybeMessage<::BodyRequest>(
    Arena* arena) {
    return Arena::CreateInternal<::BodyRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::BodyResponse* Arena::CreateMaybeMessage<::BodyResponse>(
    Arena* arena) {
    return Arena::CreateInternal<::BodyResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
