// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transform_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[5] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
        field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
        serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_transform_2eproto;
class BodyRequest;
class BodyRequestDefaultTypeInternal;
extern BodyRequestDefaultTypeInternal _BodyRequest_default_instance_;
class BodyResponse;
class BodyResponseDefaultTypeInternal;
extern BodyResponseDefaultTypeInternal _BodyResponse_default_instance_;
class HeaderRequest;
class HeaderRequestDefaultTypeInternal;
extern HeaderRequestDefaultTypeInternal _HeaderRequest_default_instance_;
class HeaderResponse;
class HeaderResponseDefaultTypeInternal;
extern HeaderResponseDefaultTypeInternal _HeaderResponse_default_instance_;
class RequestHeaderItem;
class RequestHeaderItemDefaultTypeInternal;
extern RequestHeaderItemDefaultTypeInternal
    _RequestHeaderItem_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::BodyRequest* Arena::CreateMaybeMessage<::BodyRequest>(Arena*);
template <>
::BodyResponse* Arena::CreateMaybeMessage<::BodyResponse>(Arena*);
template <>
::HeaderRequest* Arena::CreateMaybeMessage<::HeaderRequest>(Arena*);
template <>
::HeaderResponse* Arena::CreateMaybeMessage<::HeaderResponse>(Arena*);
template <>
::RequestHeaderItem* Arena::CreateMaybeMessage<::RequestHeaderItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestHeaderItem
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:RequestHeaderItem)
                   */
{
public:
    RequestHeaderItem();
    virtual ~RequestHeaderItem();

    RequestHeaderItem(const RequestHeaderItem& from);
    RequestHeaderItem(RequestHeaderItem&& from) noexcept : RequestHeaderItem() {
        *this = ::std::move(from);
    }

    inline RequestHeaderItem& operator=(const RequestHeaderItem& from) {
        CopyFrom(from);
        return *this;
    }
    inline RequestHeaderItem& operator=(RequestHeaderItem&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const RequestHeaderItem& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const RequestHeaderItem* internal_default_instance() {
        return reinterpret_cast<const RequestHeaderItem*>(
            &_RequestHeaderItem_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(RequestHeaderItem& a, RequestHeaderItem& b) { a.Swap(&b); }
    inline void Swap(RequestHeaderItem* other) {
        if (other == this) return;
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline RequestHeaderItem* New() const final {
        return CreateMaybeMessage<RequestHeaderItem>(nullptr);
    }

    RequestHeaderItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<RequestHeaderItem>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const RequestHeaderItem& from);
    void MergeFrom(const RequestHeaderItem& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* _InternalParse(
        const char* ptr,
        ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
    bool MergePartialFromCodedStream(
        ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    void SerializeWithCachedSizes(
        ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
    ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
        ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(RequestHeaderItem* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "RequestHeaderItem";
    }

private:
    inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
        return nullptr;
    }
    inline void* MaybeArenaPtr() const { return nullptr; }

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_transform_2eproto);
        return ::descriptor_table_transform_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kKeyFieldNumber = 1,
        kValueFieldNumber = 2,
    };
    // string key = 1;
    void clear_key();
    const std::string& key() const;
    void set_key(const std::string& value);
    void set_key(std::string&& value);
    void set_key(const char* value);
    void set_key(const char* value, size_t size);
    std::string* mutable_key();
    std::string* release_key();
    void set_allocated_key(std::string* key);

    // string value = 2;
    void clear_value();
    const std::string& value() const;
    void set_value(const std::string& value);
    void set_value(std::string&& value);
    void set_value(const char* value);
    void set_value(const char* value, size_t size);
    std::string* mutable_value();
    std::string* release_value();
    void set_allocated_value(std::string* value);

    // @@protoc_insertion_point(class_scope:RequestHeaderItem)
private:
    class _Internal;

    ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
        _internal_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class HeaderRequest
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:HeaderRequest)
                   */
{
public:
    HeaderRequest();
    virtual ~HeaderRequest();

    HeaderRequest(const HeaderRequest& from);
    HeaderRequest(HeaderRequest&& from) noexcept : HeaderRequest() {
        *this = ::std::move(from);
    }

    inline HeaderRequest& operator=(const HeaderRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline HeaderRequest& operator=(HeaderRequest&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const HeaderRequest& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const HeaderRequest* internal_default_instance() {
        return reinterpret_cast<const HeaderRequest*>(
            &_HeaderRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(HeaderRequest& a, HeaderRequest& b) { a.Swap(&b); }
    inline void Swap(HeaderRequest* other) {
        if (other == this) return;
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline HeaderRequest* New() const final {
        return CreateMaybeMessage<HeaderRequest>(nullptr);
    }

    HeaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<HeaderRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const HeaderRequest& from);
    void MergeFrom(const HeaderRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* _InternalParse(
        const char* ptr,
        ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
    bool MergePartialFromCodedStream(
        ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    void SerializeWithCachedSizes(
        ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
    ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
        ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(HeaderRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "HeaderRequest";
    }

private:
    inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
        return nullptr;
    }
    inline void* MaybeArenaPtr() const { return nullptr; }

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_transform_2eproto);
        return ::descriptor_table_transform_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHeadersFieldNumber = 2,
        kPathFieldNumber = 1,
    };
    // repeated .RequestHeaderItem headers = 2;
    int headers_size() const;
    void clear_headers();
    ::RequestHeaderItem* mutable_headers(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>*
    mutable_headers();
    const ::RequestHeaderItem& headers(int index) const;
    ::RequestHeaderItem* add_headers();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>&
    headers() const;

    // string path = 1;
    void clear_path();
    const std::string& path() const;
    void set_path(const std::string& value);
    void set_path(std::string&& value);
    void set_path(const char* value);
    void set_path(const char* value, size_t size);
    std::string* mutable_path();
    std::string* release_path();
    void set_allocated_path(std::string* path);

    // @@protoc_insertion_point(class_scope:HeaderRequest)
private:
    class _Internal;

    ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
        _internal_metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class HeaderResponse
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:HeaderResponse)
                   */
{
public:
    HeaderResponse();
    virtual ~HeaderResponse();

    HeaderResponse(const HeaderResponse& from);
    HeaderResponse(HeaderResponse&& from) noexcept : HeaderResponse() {
        *this = ::std::move(from);
    }

    inline HeaderResponse& operator=(const HeaderResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline HeaderResponse& operator=(HeaderResponse&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const HeaderResponse& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const HeaderResponse* internal_default_instance() {
        return reinterpret_cast<const HeaderResponse*>(
            &_HeaderResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(HeaderResponse& a, HeaderResponse& b) { a.Swap(&b); }
    inline void Swap(HeaderResponse* other) {
        if (other == this) return;
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline HeaderResponse* New() const final {
        return CreateMaybeMessage<HeaderResponse>(nullptr);
    }

    HeaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<HeaderResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const HeaderResponse& from);
    void MergeFrom(const HeaderResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* _InternalParse(
        const char* ptr,
        ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
    bool MergePartialFromCodedStream(
        ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    void SerializeWithCachedSizes(
        ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
    ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
        ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(HeaderResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "HeaderResponse";
    }

private:
    inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
        return nullptr;
    }
    inline void* MaybeArenaPtr() const { return nullptr; }

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_transform_2eproto);
        return ::descriptor_table_transform_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHeadersFieldNumber = 2,
        kPathFieldNumber = 1,
    };
    // repeated .RequestHeaderItem headers = 2;
    int headers_size() const;
    void clear_headers();
    ::RequestHeaderItem* mutable_headers(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>*
    mutable_headers();
    const ::RequestHeaderItem& headers(int index) const;
    ::RequestHeaderItem* add_headers();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>&
    headers() const;

    // string path = 1;
    void clear_path();
    const std::string& path() const;
    void set_path(const std::string& value);
    void set_path(std::string&& value);
    void set_path(const char* value);
    void set_path(const char* value, size_t size);
    std::string* mutable_path();
    std::string* release_path();
    void set_allocated_path(std::string* path);

    // @@protoc_insertion_point(class_scope:HeaderResponse)
private:
    class _Internal;

    ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
        _internal_metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class BodyRequest
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:BodyRequest) */ {
public:
    BodyRequest();
    virtual ~BodyRequest();

    BodyRequest(const BodyRequest& from);
    BodyRequest(BodyRequest&& from) noexcept : BodyRequest() {
        *this = ::std::move(from);
    }

    inline BodyRequest& operator=(const BodyRequest& from) {
        CopyFrom(from);
        return *this;
    }
    inline BodyRequest& operator=(BodyRequest&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const BodyRequest& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const BodyRequest* internal_default_instance() {
        return reinterpret_cast<const BodyRequest*>(
            &_BodyRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    friend void swap(BodyRequest& a, BodyRequest& b) { a.Swap(&b); }
    inline void Swap(BodyRequest* other) {
        if (other == this) return;
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline BodyRequest* New() const final {
        return CreateMaybeMessage<BodyRequest>(nullptr);
    }

    BodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<BodyRequest>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const BodyRequest& from);
    void MergeFrom(const BodyRequest& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* _InternalParse(
        const char* ptr,
        ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
    bool MergePartialFromCodedStream(
        ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    void SerializeWithCachedSizes(
        ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
    ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
        ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(BodyRequest* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "BodyRequest";
    }

private:
    inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
        return nullptr;
    }
    inline void* MaybeArenaPtr() const { return nullptr; }

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_transform_2eproto);
        return ::descriptor_table_transform_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kContentFieldNumber = 1,
    };
    // string content = 1;
    void clear_content();
    const std::string& content() const;
    void set_content(const std::string& value);
    void set_content(std::string&& value);
    void set_content(const char* value);
    void set_content(const char* value, size_t size);
    std::string* mutable_content();
    std::string* release_content();
    void set_allocated_content(std::string* content);

    // @@protoc_insertion_point(class_scope:BodyRequest)
private:
    class _Internal;

    ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
        _internal_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class BodyResponse
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:BodyResponse)
                   */
{
public:
    BodyResponse();
    virtual ~BodyResponse();

    BodyResponse(const BodyResponse& from);
    BodyResponse(BodyResponse&& from) noexcept : BodyResponse() {
        *this = ::std::move(from);
    }

    inline BodyResponse& operator=(const BodyResponse& from) {
        CopyFrom(from);
        return *this;
    }
    inline BodyResponse& operator=(BodyResponse&& from) noexcept {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const BodyResponse& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const BodyResponse* internal_default_instance() {
        return reinterpret_cast<const BodyResponse*>(
            &_BodyResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    friend void swap(BodyResponse& a, BodyResponse& b) { a.Swap(&b); }
    inline void Swap(BodyResponse* other) {
        if (other == this) return;
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline BodyResponse* New() const final {
        return CreateMaybeMessage<BodyResponse>(nullptr);
    }

    BodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<BodyResponse>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const BodyResponse& from);
    void MergeFrom(const BodyResponse& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    const char* _InternalParse(
        const char* ptr,
        ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
    bool MergePartialFromCodedStream(
        ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
    void SerializeWithCachedSizes(
        ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
    ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
        ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(BodyResponse* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "BodyResponse";
    }

private:
    inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
        return nullptr;
    }
    inline void* MaybeArenaPtr() const { return nullptr; }

public:
    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
            &::descriptor_table_transform_2eproto);
        return ::descriptor_table_transform_2eproto
            .file_level_metadata[kIndexInFileMessages];
    }

public:
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kContentFieldNumber = 1,
    };
    // string content = 1;
    void clear_content();
    const std::string& content() const;
    void set_content(const std::string& value);
    void set_content(std::string&& value);
    void set_content(const char* value);
    void set_content(const char* value, size_t size);
    std::string* mutable_content();
    std::string* release_content();
    void set_allocated_content(std::string* content);

    // @@protoc_insertion_point(class_scope:BodyResponse)
private:
    class _Internal;

    ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
        _internal_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_transform_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaderItem

// string key = 1;
inline void RequestHeaderItem::clear_key() {
    key_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestHeaderItem::key() const {
    // @@protoc_insertion_point(field_get:RequestHeaderItem.key)
    return key_.GetNoArena();
}
inline void RequestHeaderItem::set_key(const std::string& value) {
    key_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:RequestHeaderItem.key)
}
inline void RequestHeaderItem::set_key(std::string&& value) {
    key_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:RequestHeaderItem.key)
}
inline void RequestHeaderItem::set_key(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    key_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:RequestHeaderItem.key)
}
inline void RequestHeaderItem::set_key(const char* value, size_t size) {
    key_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:RequestHeaderItem.key)
}
inline std::string* RequestHeaderItem::mutable_key() {
    // @@protoc_insertion_point(field_mutable:RequestHeaderItem.key)
    return key_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeaderItem::release_key() {
    // @@protoc_insertion_point(field_release:RequestHeaderItem.key)

    return key_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeaderItem::set_allocated_key(std::string* key) {
    if (key != nullptr) {
    } else {
    }
    key_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
    // @@protoc_insertion_point(field_set_allocated:RequestHeaderItem.key)
}

// string value = 2;
inline void RequestHeaderItem::clear_value() {
    value_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestHeaderItem::value() const {
    // @@protoc_insertion_point(field_get:RequestHeaderItem.value)
    return value_.GetNoArena();
}
inline void RequestHeaderItem::set_value(const std::string& value) {
    value_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:RequestHeaderItem.value)
}
inline void RequestHeaderItem::set_value(std::string&& value) {
    value_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:RequestHeaderItem.value)
}
inline void RequestHeaderItem::set_value(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    value_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:RequestHeaderItem.value)
}
inline void RequestHeaderItem::set_value(const char* value, size_t size) {
    value_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:RequestHeaderItem.value)
}
inline std::string* RequestHeaderItem::mutable_value() {
    // @@protoc_insertion_point(field_mutable:RequestHeaderItem.value)
    return value_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestHeaderItem::release_value() {
    // @@protoc_insertion_point(field_release:RequestHeaderItem.value)

    return value_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeaderItem::set_allocated_value(std::string* value) {
    if (value != nullptr) {
    } else {
    }
    value_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set_allocated:RequestHeaderItem.value)
}

// -------------------------------------------------------------------

// HeaderRequest

// string path = 1;
inline void HeaderRequest::clear_path() {
    path_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HeaderRequest::path() const {
    // @@protoc_insertion_point(field_get:HeaderRequest.path)
    return path_.GetNoArena();
}
inline void HeaderRequest::set_path(const std::string& value) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:HeaderRequest.path)
}
inline void HeaderRequest::set_path(std::string&& value) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:HeaderRequest.path)
}
inline void HeaderRequest::set_path(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:HeaderRequest.path)
}
inline void HeaderRequest::set_path(const char* value, size_t size) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:HeaderRequest.path)
}
inline std::string* HeaderRequest::mutable_path() {
    // @@protoc_insertion_point(field_mutable:HeaderRequest.path)
    return path_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeaderRequest::release_path() {
    // @@protoc_insertion_point(field_release:HeaderRequest.path)

    return path_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderRequest::set_allocated_path(std::string* path) {
    if (path != nullptr) {
    } else {
    }
    path_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        path);
    // @@protoc_insertion_point(field_set_allocated:HeaderRequest.path)
}

// repeated .RequestHeaderItem headers = 2;
inline int HeaderRequest::headers_size() const { return headers_.size(); }
inline void HeaderRequest::clear_headers() { headers_.Clear(); }
inline ::RequestHeaderItem* HeaderRequest::mutable_headers(int index) {
    // @@protoc_insertion_point(field_mutable:HeaderRequest.headers)
    return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>*
HeaderRequest::mutable_headers() {
    // @@protoc_insertion_point(field_mutable_list:HeaderRequest.headers)
    return &headers_;
}
inline const ::RequestHeaderItem& HeaderRequest::headers(int index) const {
    // @@protoc_insertion_point(field_get:HeaderRequest.headers)
    return headers_.Get(index);
}
inline ::RequestHeaderItem* HeaderRequest::add_headers() {
    // @@protoc_insertion_point(field_add:HeaderRequest.headers)
    return headers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>&
HeaderRequest::headers() const {
    // @@protoc_insertion_point(field_list:HeaderRequest.headers)
    return headers_;
}

// -------------------------------------------------------------------

// HeaderResponse

// string path = 1;
inline void HeaderResponse::clear_path() {
    path_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HeaderResponse::path() const {
    // @@protoc_insertion_point(field_get:HeaderResponse.path)
    return path_.GetNoArena();
}
inline void HeaderResponse::set_path(const std::string& value) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:HeaderResponse.path)
}
inline void HeaderResponse::set_path(std::string&& value) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:HeaderResponse.path)
}
inline void HeaderResponse::set_path(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:HeaderResponse.path)
}
inline void HeaderResponse::set_path(const char* value, size_t size) {
    path_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:HeaderResponse.path)
}
inline std::string* HeaderResponse::mutable_path() {
    // @@protoc_insertion_point(field_mutable:HeaderResponse.path)
    return path_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeaderResponse::release_path() {
    // @@protoc_insertion_point(field_release:HeaderResponse.path)

    return path_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderResponse::set_allocated_path(std::string* path) {
    if (path != nullptr) {
    } else {
    }
    path_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        path);
    // @@protoc_insertion_point(field_set_allocated:HeaderResponse.path)
}

// repeated .RequestHeaderItem headers = 2;
inline int HeaderResponse::headers_size() const { return headers_.size(); }
inline void HeaderResponse::clear_headers() { headers_.Clear(); }
inline ::RequestHeaderItem* HeaderResponse::mutable_headers(int index) {
    // @@protoc_insertion_point(field_mutable:HeaderResponse.headers)
    return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>*
HeaderResponse::mutable_headers() {
    // @@protoc_insertion_point(field_mutable_list:HeaderResponse.headers)
    return &headers_;
}
inline const ::RequestHeaderItem& HeaderResponse::headers(int index) const {
    // @@protoc_insertion_point(field_get:HeaderResponse.headers)
    return headers_.Get(index);
}
inline ::RequestHeaderItem* HeaderResponse::add_headers() {
    // @@protoc_insertion_point(field_add:HeaderResponse.headers)
    return headers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::RequestHeaderItem>&
HeaderResponse::headers() const {
    // @@protoc_insertion_point(field_list:HeaderResponse.headers)
    return headers_;
}

// -------------------------------------------------------------------

// BodyRequest

// string content = 1;
inline void BodyRequest::clear_content() {
    content_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BodyRequest::content() const {
    // @@protoc_insertion_point(field_get:BodyRequest.content)
    return content_.GetNoArena();
}
inline void BodyRequest::set_content(const std::string& value) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:BodyRequest.content)
}
inline void BodyRequest::set_content(std::string&& value) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:BodyRequest.content)
}
inline void BodyRequest::set_content(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:BodyRequest.content)
}
inline void BodyRequest::set_content(const char* value, size_t size) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:BodyRequest.content)
}
inline std::string* BodyRequest::mutable_content() {
    // @@protoc_insertion_point(field_mutable:BodyRequest.content)
    return content_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BodyRequest::release_content() {
    // @@protoc_insertion_point(field_release:BodyRequest.content)

    return content_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BodyRequest::set_allocated_content(std::string* content) {
    if (content != nullptr) {
    } else {
    }
    content_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        content);
    // @@protoc_insertion_point(field_set_allocated:BodyRequest.content)
}

// -------------------------------------------------------------------

// BodyResponse

// string content = 1;
inline void BodyResponse::clear_content() {
    content_.ClearToEmptyNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BodyResponse::content() const {
    // @@protoc_insertion_point(field_get:BodyResponse.content)
    return content_.GetNoArena();
}
inline void BodyResponse::set_content(const std::string& value) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value);
    // @@protoc_insertion_point(field_set:BodyResponse.content)
}
inline void BodyResponse::set_content(std::string&& value) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:BodyResponse.content)
}
inline void BodyResponse::set_content(const char* value) {
    GOOGLE_DCHECK(value != nullptr);

    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(value));
    // @@protoc_insertion_point(field_set_char:BodyResponse.content)
}
inline void BodyResponse::set_content(const char* value, size_t size) {
    content_.SetNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        ::std::string(reinterpret_cast<const char*>(value), size));
    // @@protoc_insertion_point(field_set_pointer:BodyResponse.content)
}
inline std::string* BodyResponse::mutable_content() {
    // @@protoc_insertion_point(field_mutable:BodyResponse.content)
    return content_.MutableNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BodyResponse::release_content() {
    // @@protoc_insertion_point(field_release:BodyResponse.content)

    return content_.ReleaseNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BodyResponse::set_allocated_content(std::string* content) {
    if (content != nullptr) {
    } else {
    }
    content_.SetAllocatedNoArena(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        content);
    // @@protoc_insertion_point(field_set_allocated:BodyResponse.content)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
